// Automaticaly generated by script/generate_declaration.pl.

#ifndef TOKENIZER_DECLARATION_H
#define TOKENIZER_DECLARATION_H


sint32 main(int argc, char **argv);
static inline bool io_buffer_structure_legal_p(s_io_buffer_t *io_buffer);
static inline bool tokenizer_file_structure_legal_p(s_tokenizer_file_t *tkz_file_list);
static inline bool tokenizer_io_block_structure_legal_p(s_io_block_t *io_block);
static inline bool tokenizer_io_buffer_fill_buffer_p(s_tokenizer_io_buffer_t *tkz_io_buffer, e_tokenizer_language_type_t tkz_type);
static inline bool tokenizer_io_buffer_fill_secondary_tail_p(s_io_buffer_t *secondary, uint32 index);
static inline bool tokenizer_io_buffer_primary_fill_p(s_tokenizer_io_buffer_t *tkz_io_buffer);
static inline bool tokenizer_io_buffer_reach_limit_p(s_io_buffer_t *buffer);
static inline bool tokenizer_io_buffer_secondary_fill_p(s_tokenizer_io_buffer_t *tkz_io_buffer, e_tokenizer_language_type_t tkz_type);
static inline bool tokenizer_io_buffer_structure_legal_p(s_tokenizer_io_buffer_t *tkz_io_buffer);
static inline bool tokenizer_language_structure_legal_p(s_tokenizer_language_t *tkz_language);
static inline bool tokenizer_language_type_legal_p(e_tokenizer_language_type_t language_type);
static inline bool tokenizer_language_type_p(e_tokenizer_language_type_t tkz_language_type);
static inline e_tokenizer_language_type_t tokenizer_language_filename_to_type(char *filename);
static inline s_io_block_t * tokenizer_io_block_create(void);
static inline s_io_buffer_t * io_buffer_create(void);
static inline s_tokenizer_file_t * tokenizer_file_create(char *fname);
static inline s_tokenizer_io_buffer_t * tokenizer_io_buffer_create(char *fname);
static inline s_tokenizer_language_t * tokenizer_language_create(e_tokenizer_language_type_t type);
static inline s_tokenizer_language_t * tokenizer_language_obtain(char *filename);
static inline uint32 tokenizer_io_block_data_size(char *buf);
static inline uint32 tokenizer_io_block_fill(s_io_block_t *io_block, char *buf);
static inline uint32 tokenizer_io_buffer_secondary_resume(s_io_buffer_t *secondary);
static inline uint32 tokenizer_io_buffer_skip_comment(s_tokenizer_io_buffer_t *tkz_io_buffer, uint32 index, e_tokenizer_language_type_t tkz_type);
static inline uint32 tokenizer_io_buffer_skip_multiple_comment(s_tokenizer_io_buffer_t *tkz_io_buffer, uint32 index, e_tokenizer_language_type_t tkz_type);
static inline uint32 tokenizer_io_buffer_skip_single_comment(s_tokenizer_io_buffer_t *tkz_io_buffer, uint32 index, e_tokenizer_language_type_t tkz_type);
static inline uint32 tokenizer_language_c_token_match(s_tokenizer_language_t *tkz_language, s_token_t *token_head, char *buf);
static inline void io_buffer_print(s_io_buffer_t *buffer);
static inline void tokenizer_arguements_option_process(char *option);
static inline void tokenizer_arguements_process(uint32 argc, char **argv);
static inline void tokenizer_file_destroy(s_tokenizer_file_t *tkz_file);
static inline void tokenizer_file_io_buffer_process(s_io_buffer_t *io_buffer, s_tokenizer_language_t *tkz_language, s_token_t *token_head);
static inline void tokenizer_file_open_print(char *fname);
static inline void tokenizer_file_print(s_tokenizer_file_t *tkz_file);
static inline void tokenizer_file_process(char **file_list, uint32 count);
static inline void tokenizer_file_token_process(s_tokenizer_file_t *tkz_file);
static inline void tokenizer_io_block_destroy(s_io_block_t *io_block);
static inline void tokenizer_io_block_language_c_match(s_tokenizer_language_t *tkz_language, s_token_t *token_head, s_io_block_t *io_block);
static inline void tokenizer_io_block_language_c_match(s_tokenizer_language_t *tkz_language, s_token_t *token_head, s_io_block_t *io_block);
static inline void tokenizer_io_block_print(s_io_block_t *io_block);
static inline void tokenizer_io_block_process(s_tokenizer_language_t *tkz_language, s_token_t *token_head, s_io_block_t *io_block);
static inline void tokenizer_io_buffer_destroy(s_tokenizer_io_buffer_t *tkz_io_buffer);
static inline void tokenizer_language_c_destroy(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_language_c_init(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_language_c_keyword_trie_destroy(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_language_c_keyword_trie_init(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_language_c_nfa_engine_destroy(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_language_c_nfa_engine_init(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_language_cache_cleanup(void);
static inline void tokenizer_language_destroy(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_language_init(s_tokenizer_language_t *tkz_language);
static inline void tokenizer_logfile_close(void);
static inline void tokenizer_logfile_open(char *binary_name);

#endif
