// Automaticaly generated by script/generate_declaration.pl.

#ifndef TOKEN_DECLARATION_H
#define TOKEN_DECLARATION_H


bool tk_char_comment_p(char *buf, e_tkz_lang_type_t tkz_type);
bool tk_char_double_quote_p(char c);
bool tk_char_multiple_comment_head_p(char *buf, e_tkz_lang_type_t tkz_type);
bool tk_char_multiple_comment_tail_p(char *buf, e_tkz_lang_type_t tkz_type);
bool tk_char_single_comment_p(char *buf, e_tkz_lang_type_t tkz_type);
bool tk_structure_illegal_p(s_tk_t *token);
bool tk_structure_legal_p(s_tk_t *token);
s_tk_t * tk_list_node_next(s_tk_t *token);
s_tk_t * tk_list_node_previous(s_tk_t *token);
s_trie_tree_t * tk_lang_c_keyword_trie_create(void);
static inline bool tk_lang_c_keyword_match_p(s_trie_tree_t *keyword_trie, char *name);
static inline bool tk_lang_c_multiple_comment_head_p(char *buf);
static inline bool tk_lang_c_multiple_comment_tail_p(char *buf);
static inline bool tk_lang_c_single_comment_p(char *buf);
static inline bool tk_structure_illegal_ip(s_tk_t *token);
static inline bool tk_structure_legal_ip(s_tk_t *token);
static inline s_tk_t * tk_lang_c_cnst_create(char *buf, uint32 size);
static inline s_tk_t * tk_lang_c_idtr_create(char *name, uint32 size);
static inline s_tk_t * tk_lang_c_optr_create(char *name, uint32 size);
static inline s_tk_t * tk_lang_c_pctt_create(char c);
static inline s_tk_t * tk_list_node_next_i(s_tk_t *token);
static inline s_tk_t * tk_list_node_previous_i(s_tk_t *token);
static inline uint32 tk_lang_c_nfa_match(s_nfa_t *nfa, char *buf);
static inline void tk_lang_c_keyword_seek(s_trie_tree_t *keyword_trie, s_tk_t *token);
static inline void tk_lang_c_node_destroy(s_tk_t *tk_node);
static inline void tk_lang_c_print(s_tk_t *token);
static inline void tk_list_insert_before(s_tk_t *tk_head, s_tk_t *inserted);
uint32 tk_lang_c_cnst_match(s_nfa_t *nfa, s_tk_t *tk_head, char *buf);
uint32 tk_lang_c_idtr_match(s_nfa_t *nfa, s_trie_tree_t *keyword_trie, s_tk_t *tk_head, char *buf);
uint32 tk_lang_c_optr_match(s_nfa_t *nfa, s_tk_t *tk_head, char *buf);
uint32 tk_lang_c_pctt_match(s_nfa_t *nfa, s_tk_t *tk_head, char *buf);
void tk_lang_c_destroy(s_tk_t *tk_list);
void tk_lang_c_keyword_trie_destroy(s_trie_tree_t **keyword_trie);
void tk_print(s_tk_t *token, e_tkz_lang_type_t tkz_lang_type);

#endif
