// Automaticaly generated by script/generate_declaration.pl.

#ifndef TOKEN_DECLARATION_H
#define TOKEN_DECLARATION_H


s_token_file_t * token_file_list_process(char **file_list, uint32 count);
s_token_language_c_kywd_t * token_language_c_keyword_trie_create(void);
static inline bool token_file_structure_legal_p(s_token_file_t *token_file);
static inline bool token_language_c_keyword_structure_legal_p(s_token_language_c_kywd_t *node);
static inline bool token_language_c_keyword_trie_node_leaf_p(s_token_language_c_kywd_t *node);
static inline bool token_language_c_optr_consist_of_p(e_token_language_c_optr_type_t prefix, e_token_language_c_optr_type_t suffix);
static inline bool token_language_c_optr_dual_consist_of_p(e_token_language_c_optr_type_t prefix, e_token_language_c_optr_type_t suffix);
static inline bool token_language_c_optr_dual_prefix_p(e_token_language_c_optr_type_t t);
static inline bool token_language_c_optr_dual_suffix_p(e_token_language_c_optr_type_t t);
static inline bool token_language_c_optr_triple_consist_of_p(e_token_language_c_optr_type_t prefix, e_token_language_c_optr_type_t suffix);
static inline bool token_language_c_optr_triple_prefix(e_token_language_c_optr_type_t t);
static inline bool token_language_c_optr_triple_prefix_p(e_token_language_c_optr_type_t t);
static inline bool token_language_c_optr_type_p(char t);
static inline bool token_language_c_pctt_type_p(e_token_language_c_cptt_t type);
static inline bool token_structure_legal_p(s_token_t *token);
static inline e_token_language_c_keyword_type_t token_language_c_keyword_match(s_token_language_c_kywd_t *keyword_trie, char *idtr);
static inline e_token_language_c_keyword_type_t token_language_c_keyword_to_type(char **keyword);
static inline e_token_language_c_optr_type_t token_language_c_optr_type_get(s_token_t *token);
static inline s_token_file_t * token_file_next(s_token_file_t *token_file);
static inline s_token_file_t * token_file_process(char *fname);
static inline s_token_language_c_kywd_t * token_language_c_keyword_trie_node_create(char c);
static inline s_token_t * token_file_process_i(char *filename);
static inline s_token_t * token_language_c_cnst_create(char *buf, uint32 size);
static inline s_token_t * token_language_c_idtr_create(char *buf, uint32 size);
static inline s_token_t * token_language_c_optr_create(e_token_language_c_optr_type_t type);
static inline s_token_t * token_language_c_pctt_create(char c);
static inline s_token_t * token_list_previous_node(s_token_t *token);
static inline uint32 token_lang_constant_match(s_tokenizer_lang_t *lang, s_token_t *token_head, char *buf);
static inline uint32 token_lang_identifer_match(s_tokenizer_lang_t *lang, s_token_t *token_head, char *buf);
static inline uint32 token_lang_operator_match(s_tokenizer_lang_t *lang, s_token_t *token_head, char *buf);
static inline uint32 token_lang_punctuation_match(s_tokenizer_lang_t *lang, s_token_t *token_head, char *buf);
static inline uint32 token_language_c_constant_match(s_nfa_engine_t *nfa, s_token_t *token_head, char *buf);
static inline uint32 token_language_c_identifier_match(s_nfa_engine_t *nfa, s_token_t *token_head, char *buf);
static inline uint32 token_language_c_operator_match(s_nfa_engine_t *nfa, s_token_t *token_head, char *buf);
static inline uint32 token_language_c_punctuation_match(s_nfa_engine_t *nfa, s_token_t *token_head, char *buf);
static inline void token_file_insert_before(s_token_file_t *token_file, s_token_file_t *token_node);
static inline void token_file_node_destroy(s_token_file_t *token_file);
static inline void token_language_c_keyword_seek(s_token_language_c_kywd_t *keyword_trie, s_token_t *token);
static inline void token_language_c_keyword_trie_insert(s_token_language_c_kywd_t *root, char **keyword);
static inline void token_language_c_keyword_trie_legal_p(s_token_language_c_kywd_t *keyword_trie);
static inline void token_language_c_optr_type_set(s_token_t *token, e_token_language_c_optr_type_t type);
static inline void token_list_insert_before(s_token_t *token_head, s_token_t *inserted);
static inline void tokenizer_file_process_io_buffer(s_io_buffer_t *buffer, s_token_t *token_head, s_tokenizer_lang_t *lang);
void token_file_list_destroy(s_token_file_t *token_file);
void token_language_c_keyword_trie_destroy(s_token_language_c_kywd_t *keyword_trie);

#endif
